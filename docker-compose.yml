version: '3.8'

services:
  postgresql:
    image: postgres:16
    container_name: postgresql_db
    environment:
      POSTGRES_DB: todo
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d todo"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cassandra:
    image: cassandra:4.1
    container_name: cassandra_db
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -u cassandra -p cassandra --request-timeout=5 -e 'DESCRIBE KEYSPACES'"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq_server
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  nestjs-app:
    build:
      context: ./api             # points to the new api directory
      dockerfile: Dockerfile     # Dockerfile is inside ./api
    container_name: nestjs_api
    ports:
      - "3000:3000"
    environment:
      DATABASE_HOST: "postgresql"
      DATABASE_PORT: "5432"
      DATABASE_USER: "user"
      DATABASE_PASSWORD: "password"
      DATABASE_NAME: "todo"
      JWT_SECRET: "secret"
      SALT_ROUNDS: 10
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  cassandra_data:
  rabbitmq_data: